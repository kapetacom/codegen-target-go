// #FILENAME:main.go:create-only
package main

import (
    kapeta "github.com/kapetacom/sdk-go-config"
    "github.com/kapetacom/sdk-go-rest-server/server"
{{#provides 'kapeta/resource-type-rest-api'}}
    "{{@root.options.basePackage}}/generated"
{{/provides}}
{{#consumes 'kapeta/resource-type-auth-jwt-consumer'}}
    "{{@root.options.basePackage}}/generated/auth"
{{/consumes}}
{{#consumes 'kapeta/resource-type-mongodb'}}
    "{{@root.options.basePackage}}/generated/data"
    "log"
    "context"
{{/consumes}}
{{#consumes 'kapeta/resource-type-pubsub-subscriber'}}
    "{{@root.options.basePackage}}/generated/pubsub/subscriber"
    "context"
{{/consumes}}
)

func main() {
    serverInstance := server.NewWithDefaults()

    config, err := kapeta.Init(".")
    if err != nil {
        panic(err)
    }
    port, err := config.GetServerPort("rest")
    if err != nil {
        panic(err)
    }

    host, err := config.GetServerHost()
    if err != nil {
        panic(err)
    }

    {{#consumers-of-type 'kapeta/resource-type-auth-jwt-consumer'}}
    serverInstance.Use(auth.AddJWTMiddleware(config)...)
    {{/consumers-of-type}}

    {{#provides 'kapeta/resource-type-rest-api'}}
    err = generated.RegisterRouters(serverInstance, config)
    if err != nil {
        panic(err)
    }
    {{/provides}}

    {{#consumers-of-type 'kapeta/resource-type-mongodb'}}
    db{{type metadata.name}}, close{{type metadata.name}}, err := data.New{{type metadata.name}}(config)
    if err != nil {
       log.Fatal(err)
    }
    defer close{{type metadata.name}}()
    err = db{{type metadata.name}}.Ping(context.Background(), nil) // Check if the database is alive
    if err != nil {
        log.Fatal(err)
    }
    {{/consumers-of-type}}

    {{#consumers-of-type 'kapeta/resource-type-pubsub-subscriber'}}
    {{camelCase this.metadata.name}}Consumer, err := subscriber.Create{{pascalCase this.metadata.name}}Consumer(config)
    if err != nil {
        panic(err)
    }
    go {{camelCase this.metadata.name}}Consumer.ReceiveMessages(context.Background())
    {{/consumers-of-type}}

    // Start the server and log if it fails
    serverInstance.Logger.Debug("Starting server on port " + port)
    serverInstance.Logger.Fatal(serverInstance.Start(host + ":"+port))
}
